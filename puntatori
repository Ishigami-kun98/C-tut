Puntatori sono tipi di dati molto
particolari, non contengono numeri
non contengono stringhe non contengono
informazioni interpretabili.

I puntatori CONTENGONO INDIRIZZI Di
MEMORIA, e sono dei dati che servono
per accedere a una specifica locazione
di memoria nella quale c'è il dato di
nostra memoria, i puntatori permettono
di accedere il dato in interesse in
modo diretto, sono un tramite per il
dato.

un puntatore si definisce
sintatticamente come il tipo di dato in
interessere

* è il puntatore.

int * BelovedFabio;

BelovedFabio contiene l'indirizzo di
memoria al quale trovare un intero.

questo meccanismo di accesso diretto
ci permette di usare un puntatore per
accedere a diversi indirizzi di MEMORIA

int i;
i sarà associato sempre a un indirizzo
univoco

int *pi;
è un puntatore, allora basta cambiare
indirizzo per vedere altri int.


Il puntatore è sempre un dato che
contiene l'indirizzo di dato di un
altro memoria, cioè legano 2 entità
tra loro, il puntatore stesso e il
dato.


int *pi;
senza nulla sta puntando a un indirizzo
random di memoria, se lo uso, il pc si
suicida, perchè siccome è random allora
potrebbe puntare anche al sistema oper.
perciò se lo usiamo male, siamo fritti.
una cosa che bisogna fare sempre sempre
everytime è inizializzarlo subito,
di default si fa.

int *pi = 0;

l'indirizzo safe è 0.

standard 11 possiamo usare

int *pi = nullptr; che è same.


Come dare un valore a un puntatore?

dobbiamo associare indirizzo di MEMORIA:

int Fabio = 2;

int *pi = nullptr;
//assegnare a pi indirizzo di i;

pi = &Fabio;
& = dammi indirizzo dove vive Fabio;


il tipo di puntatore punta al tipo
che c'è nell indirizzo
cioè se è int *pi non puo essere
associato a string Fabio.


Dereferenziamento

significa andare nella cella dove il
puntatore punta e posso cambiare il valore
della variabile, e si fa:

*pi = 0;

in questo caso Fabio = 0;


Se abbiamo

int *pj;

possiamo

pj = pi;

2 puntatori che puntano allo stesso
indirizzo e questo si chiama
CONDIVISIONE DI DATI

pj = &pi è una funzione sbagliata
perchè sto dicendo che pj sta cercando
di chiedere l'indirizoo di un indirizzo
e non è compatibile.


void *pi non devono esistere ;)

inoltre int *****************pi esiste

ma di solito viene ammessa al massimo

int **pi

quando si hanno piu di 2 puntatori a
cascata, significa che abbiamo qualche
throwble(problemi) e se è giusto
diventa un pocchino molto difficile
da gestire ;))))
